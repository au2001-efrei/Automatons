
1. Reading automaton...
Alphabet: a
Initial states: 1
Terminal states: 0 3 4
Transition table:
  /  | a 
-----+---
 ← 0 | 3 
 → 1 | 2 
  2  | 3 
 ← 3 | 4 
 ← 4 | 0 

2. Determinizing and completing automaton...
Alphabet: a
Initial states: 1
Terminal states: 0 3 4
Transition table:
  /  | a 
-----+---
 ← 0 | 3 
 → 1 | 2 
  2  | 3 
 ← 3 | 4 
 ← 4 | 0 

3. Minimizing automaton...
Alphabet: a
Initial states: 1
Terminal states: 0+3+4
Transition table:
    /    |   a   
---------+-------
 ← 0+3+4 | 0+3+4 
   → 1   |   2   
    2    | 0+3+4 

4. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

5. Creating an automaton which recognizes the complementary language...
Alphabet: a
Initial states: 1
Terminal states: 1 2
Transition table:
   /   |   a   
-------+-------
 0+3+4 | 0+3+4 
  ←→ 1 |   2   
  ← 2  | 0+3+4 

6. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

7. Standardizing automaton...
Alphabet: a
Initial states: 1
Terminal states: 1 2
Transition table:
   /   |   a   
-------+-------
 0+3+4 | 0+3+4 
  ←→ 1 |   2   
  ← 2  | 0+3+4 

8. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.
