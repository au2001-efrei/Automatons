
1. Reading automaton...
Alphabet: a b c d
Initial states: 1
Terminal states: 0
Transition table:
  /  | a | b | c | d 
-----+---+---+---+---
 ← 0 |   |   |   |   
 → 1 | 2 | 3 | 4 | 0 
  2  | 2 | 3 | 4 | 0 
  3  |   | 3 | 4 | 0 
  4  |   |   | 4 | 0 

2. Determinizing and completing automaton...
Alphabet: a b c d
Initial states: 1
Terminal states: 0
Transition table:
  /  | a | b | c | d 
-----+---+---+---+---
 ← 0 | X | X | X | X 
 → 1 | 2 | 3 | 4 | 0 
  2  | 2 | 3 | 4 | 0 
  3  | X | 3 | 4 | 0 
  4  | X | X | 4 | 0 
  X  | X | X | X | X 

3. Minimizing automaton...
Alphabet: a b c d
Initial states:
Terminal states: 0
Transition table:
  /  |  a  | b | c | d 
-----+-----+---+---+---
 ← 0 |  X  | X | X | X 
 1+2 | 1+2 | 3 | 4 | 0 
  3  |  X  | 3 | 4 | 0 
  4  |  X  | X | 4 | 0 
  X  |  X  | X | X | X 

4. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

5. Creating an automaton which recognizes the complementary language...
Alphabet: a b c d
Initial states: 
Terminal states:  X
Transition table:
  /  | a | b | c | d 
-----+---+---+---+---
 ←→  | X | X | X | X 
 ← X | X | X | X | X 

6. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

7. Standardizing automaton...
Alphabet: a b c d
Initial states: 
Terminal states:  X
Transition table:
  /  | a | b | c | d 
-----+---+---+---+---
 ←→  | X | X | X | X 
 ← X | X | X | X | X 

8. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.
