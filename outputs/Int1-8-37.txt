
1. Reading automaton...
Alphabet: a b
Initial states: 0
Terminal states: 0 1 2 3 4
Transition table:
  /   | a | b 
------+---+---
 ←→ 0 | 1 | 3 
 ← 1  | 2 | 4 
 ← 2  |   | 0 
 ← 3  | 1 | 0 
 ← 4  | 1 |   

2. Determinizing and completing automaton...
Alphabet: a b
Initial states: 0
Terminal states: 0 1 2 3 4
Transition table:
  /   | a | b 
------+---+---
 ←→ 0 | 1 | 3 
 ← 1  | 2 | 4 
 ← 2  | X | 0 
 ← 3  | 1 | 0 
 ← 4  | 1 | X 
  X   | X | X 

3. Minimizing automaton...
Alphabet: a b
Initial states: 0+3
Terminal states: 0+3 1 2 4
Transition table:
   /    | a |  b  
--------+---+-----
 ←→ 0+3 | 1 | 0+3 
  ← 1   | 2 |  4  
  ← 2   | X | 0+3 
  ← 4   | 1 |  X  
   X    | X |  X  

4. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

5. Creating an automaton which recognizes the complementary language...
Alphabet: a b
Initial states: 0+3
Terminal states: X
Transition table:
   /   | a |  b  
-------+---+-----
 → 0+3 | 1 | 0+3 
   1   | 2 |  4  
   2   | X | 0+3 
   4   | 1 |  X  
  ← X  | X |  X  

6. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

7. Standardizing automaton...
Alphabet: a b
Initial states: I
Terminal states: X
Transition table:
  /  | a |  b  
-----+---+-----
 0+3 | 1 | 0+3 
  1  | 2 |  4  
  2  | X | 0+3 
  4  | 1 |  X  
 → I | 1 | 0+3 
 ← X | X |  X  

8. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.
