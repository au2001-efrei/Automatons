
1. Reading automaton...
Alphabet: a b
Initial states: 0
Terminal states: 7
Transition table:
  /  |  *  | a | b 
-----+-----+---+---
 → 0 | 1 4 |   |   
  1  |  3  | 2 |   
  2  |     | 3 | 1 
  3  |  7  |   | 3 
  4  |     |   | 5 
  5  |     |   | 6 
  6  | 4 7 |   |   
 ← 7 |     |   |   

2. Determinizing and completing automaton...
Alphabet: a b
Initial states: 0,1,3,4,7
Terminal states: 0,1,3,4,7 1,3 3,4,6,7 3,5,7 3,7
Transition table:
      /       |  a  |    b    
--------------+-----+---------
 ←→ 0,1,3,4,7 |  2  |  3,5,7  
    ← 1,3     |  2  |   3,7   
      2       | 3,7 |   1,3   
  ← 3,4,6,7   |  X  |  3,5,7  
   ← 3,5,7    |  X  | 3,4,6,7 
    ← 3,7     |  X  |   3,7   
      X       |  X  |    X    

3. Minimizing automaton...
Alphabet: a b
Initial states:
Terminal states: 0,1,3,4,7+1,3 3,4,6,7+3,5,7+3,7
Transition table:
          /          |         a         |         b         
---------------------+-------------------+-------------------
   ← 0,1,3,4,7+1,3   |         2         | 3,4,6,7+3,5,7+3,7 
          2          | 3,4,6,7+3,5,7+3,7 |   0,1,3,4,7+1,3   
 ← 3,4,6,7+3,5,7+3,7 |         X         | 3,4,6,7+3,5,7+3,7 
          X          |         X         |         X         

4. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

5. Creating an automaton which recognizes the complementary language...
Alphabet: a b
Initial states: 
Terminal states:  X
Transition table:
  /  | a | b 
-----+---+---
 ←→  | X | X 
 ← X | X | X 

6. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

7. Standardizing automaton...
Alphabet: a b
Initial states: 
Terminal states:  X
Transition table:
  /  | a | b 
-----+---+---
 ←→  | X | X 
 ← X | X | X 

8. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.
