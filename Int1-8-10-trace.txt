
1. Reading automaton...
Alphabet: a b
Initial states: 0
Terminal states: 0
Transition table:
  /   | a | b 
------+---+---
 ←→ 0 | 1 |   
  1   | 2 | 2 
  2   | 3 |   
  3   | 4 | 4 
  4   | 0 |   

2. Determinizing and completing automaton...
Alphabet: a b
Initial states: 0
Terminal states: 0
Transition table:
  /   | a | b 
------+---+---
 ←→ 0 | 1 | X 
  1   | 2 | 2 
  2   | 3 | X 
  3   | 4 | 4 
  4   | 0 | X 
  X   | X | X 

3. Minimizing automaton...
Alphabet: a b
Initial states: 0
Terminal states: 0
Transition table:
  /   | a | b 
------+---+---
 ←→ 0 | 1 | X 
  1   | 2 | 2 
  2   | 3 | X 
  3   | 4 | 4 
  4   | 0 | X 
  X   | X | X 

4. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

5. Creating an automaton which recognizes the complementary language...
Alphabet: a b
Initial states: 0
Terminal states: 1 2 3 4 X
Transition table:
  /  | a | b 
-----+---+---
 → 0 | 1 | X 
 ← 1 | 2 | 2 
 ← 2 | 3 | X 
 ← 3 | 4 | 4 
 ← 4 | 0 | X 
 ← X | X | X 

6. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.

7. Standardizing automaton...
Alphabet: a b
Initial states: I
Terminal states: 1 2 3 4 X
Transition table:
  /  | a | b 
-----+---+---
  0  | 1 | X 
 ← 1 | 2 | 2 
 ← 2 | 3 | X 
 ← 3 | 4 | 4 
 ← 4 | 0 | X 
 → I | 1 | X 
 ← X | X | X 

8. Starting word recognition...
This step was skipped in this output file.
Execute the program to test word recognition by yourself.
